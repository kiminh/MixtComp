install.packages("Rcpp")
install.packages("shape")
install.packages("RInside")
install.packages("truncnorm")
library(RMixtComp)
install.package("truncnorm")
install.packages("truncnorm")
install.packages("shape")
library(RMixtComp)
library(RMixtComp)
library(RMixtComp)
out <- testNewLearn()
library(RMixtComp)
library(RMixtComp)
library(RMixtComp)
library(RMixtComp)
# Lance les éxécutions de toutes les étapes : recodage, échantillonnage, apprentissage et prédiction
path_to_livrable_2 <- "/home/etienne/cylande/retfor/livrable_2/"
setwd(dir = path_to_livrable_2)
source("run/require_packages.r")
source("run/params.r")
DATA_PROCESSING_PHASE <- TRUE
SAMPLING_PHASE <- TRUE
VARIABLE_SELECTION_PHASE <- FALSE
MIXTCOMP_PHASE <- TRUE
RETFOR_PHASE <- TRUE
source("run/1_data_preprocessing.r")
source("run/2_data_sampling.r")
source("run/3_variable_selection.r")
source("run/4_mixtcomp.r")
source("run/5_retfor.r")
library(RMixtComp)
out <- testGenDataLearn()
out <- testGenDataLearn()
out <- testGenDataLearn()
library(RMixtComp)
out <- testGenDataLearn()
46000*0.07
library(RMixtComp)
testGenDataLearn()
# Lance les éxécutions de toutes les étapes : recodage, échantillonnage, apprentissage et prédiction
path_to_livrable_2 <- "/home/etienne/cylande/retfor/livrable_2/"
setwd(dir = path_to_livrable_2)
source("run/require_packages.r")
source("run/params.r")
DATA_PROCESSING_PHASE <- TRUE
SAMPLING_PHASE <- TRUE
VARIABLE_SELECTION_PHASE <- FALSE
MIXTCOMP_PHASE <- TRUE
RETFOR_PHASE <- TRUE
source("run/1_data_preprocessing.r")
source("run/2_data_sampling.r")
source("run/3_variable_selection.r")
source("run/4_mixtcomp.r")
param_mixtcomp <- mixtcomp_learning(nbClass = nbClass,
dataPath=  path_data_training_to_write,
descriptorPath= path_descriptor,
n_iter = n_iter,
n_burnin_iter = n_burnin_iter,
gibbs_n_iter = gibbs_n_iter,
gibbs_n_burnin_iter = gibbs_n_burnin_iter,
n_parallel_mixtcomp = n_parallel_mixtcomp)
param_mixtcomp$variable$data$ANNEEDOUVERTURE$stat
testGenDataLearn()
testGenDataLearn()
require(RMixtComp)
testGenDataLearn()
testGenDataLearn()
require(RMixtComp)
testGenDataLearn()
testGenDataLearn()
res <- testGenDataLearn()
res$variable$data$categorical1$stat
res$variable$data$gaussian1$stat
param_mixtcomp_json <- fromJSON("/home/etienne/cylande/retfor/livrable_2/data/working_data/test_json_output.json")
require(jsonlite)
param_mixtcomp_json <- fromJSON("/home/etienne/cylande/retfor/livrable_2/data/working_data/test_json_output.json")
param_mixtcomp_json$variable$data$ANNEEDOUVERTURE$completed
param_mixtcomp_json$variable$data$ANNEEDOUVERTURE$stat
param_mixtcomp_json$variable$data$z_class
param_mixtcomp_json$variable$type
param_mixtcomp_json$mixture$IDClass$idc
param_mixtcomp_json$mixture$IDClass$colName
param_mixtcomp_json$mixture$IDClass$idc
param_mixtcomp_json$variable$param$ANNEEDOUVERTURE$NumericalParam$stat
param_mixtcomp_json$variable$param$ANNEEDOUVERTURE$NumericalParam$paramStr
param_mixtcomp_json$variable$param$ANNEEDOUVERTURE$NumericalParam$stat
param_mixtcomp_json$variable$param$ANNEEDOUVERTURE$NumericalParam$log
library(RMixtComp)
install.packages("plotly")
library(RMixtComp)
library(RMixtComp)
detach("package:vegan", unload=TRUE)
?mixtCompPredict
library(RMixtComp)
?mixtCompPredict
pathToData <- system.file("extdata", "data.csv", package = "RMixtComp")
pathToDescriptor <- system.file("extdata", "descriptor.csv", package = "RMixtComp")
resGetData <- getData(c(pathToData, pathToDescriptor))
mcStrategy <- list(nbBurnInIter = 100,
nbIter = 100,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
parameterEdgeAuthorized = FALSE)
res <- mixtCompCluster(resGetData$lm, mcStrategy, nbClass = 2, confidenceLevel = 0.95)
setwd("/home/etienne/mixtcomp/JsonMixtcomp/test/test_fonctionnel")
require(jsonlite)
require(RMixtComp)
path_mixtcomp_learn_input <- "/home/etienne/mixtcomp/JsonMixtcomp/test/test_fonctionnel/working_data/mixtcomp_learn_input.json"
path_mixtcomp_predict_input <- "/home/etienne/mixtcomp/JsonMixtcomp/test/test_fonctionnel/working_data/mixtcomp_predict_input.json"
path_mixtcomp_learn_output <- "/home/etienne/mixtcomp/JsonMixtcomp/test/test_fonctionnel/working_data/mixtcomp_learn_output.json"
path_mixtcomp_predict_output <- "/home/etienne/mixtcomp/JsonMixtcomp/test/test_fonctionnel/working_data/mixtcomp_predict_output.json"
# préparation Json Mixtcomp Learn
####### Json file preparation
resGetData <- getData(c("working_data/data_training_test_data_fonctionnelle.csv",
"working_data/descriptor_data_fonctionnelle.csv"))
for(i in 1:length(resGetData$lm)){
resGetData$lm[[i]]$data <- as.character(resGetData$lm[[i]]$data)
}
mcStrategy = list(nbBurnInIter=100,nbIter=100,nbGibbsBurnInIter=10,nbGibbsIter=10,parameterEdgeAuthorized=T)
arg_list_json <- toJSON(list(by_row=FALSE,
resGetData_lm = resGetData$lm,
mcStrategy=mcStrategy,
nbClass = 2,
confidenceLevel = 0.95,
mode="learn"),
auto_unbox = T)
write(x = arg_list_json,"working_data/mixtcomp_input.json")
###### Mixtcomp run
cmd <- paste("/home/etienne/mixtcomp/JsonMixtcomp/bin/JsonMixtComp","working_data/mixtcomp_input.json", path_mixtcomp_learn_output,sep=" ")
system(cmd)
resGetData <- getData(c("working_data/data_training_test_data_fonctionnelle.csv",
"working_data/descriptor_data_fonctionnelle.csv"))
for(i in 1:length(resGetData$lm)){
resGetData$lm[[i]]$data <- as.character(resGetData$lm[[i]]$data)
}
mcStrategy = list(nbBurnInIter=100,nbIter=100,nbGibbsBurnInIter=10,nbGibbsIter=10,parameterEdgeAuthorized=T)
arg_list_json <- toJSON(list(by_row=FALSE,
resGetData_lm = resGetData$lm,
mcStrategy=mcStrategy,
nbClass = 2,
confidenceLevel = 0.95,
mode="predict",
pathParamList=path_mixtcomp_learn_output),
auto_unbox = T)
write(x = arg_list_json,"working_data/mixtcomp_predict_input.json")
# Mixtcomp Predict
system(paste("/home/etienne/mixtcomp/JsonMixtcomp/bin/JsonMixtComp", "working_data/mixtcomp_predict_input.json",path_mixtcomp_predict_output,sep=" "))
require(RMixtComp)
res_learn <- mixtCompCluster(dataList = resGetData$lm,mcStrategy = mcStrategy,nbClass = 2,confidenceLevel = 0.95)
res_pred <- mixtCompPredict(dataList = resGetData$lm,paramList = res_learn$variable$param,mcStrategy = mcStrategy,nbClass = 2,confidenceLevel = 0.95)
system(paste("/home/etienne/mixtcomp/JsonMixtcomp/bin/JsonMixtComp", "working_data/mixtcomp_predict_input.json",path_mixtcomp_predict_output,sep=" "))
system(paste("/home/etienne/mixtcomp/JsonMixtcomp/bin/JsonMixtComp", "working_data/mixtcomp_predict_input.json",path_mixtcomp_predict_output,sep=" "))
detach("package:RMixtComp", unload=TRUE)
library("RMixtComp", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
res_pred <- mixtCompPredict(dataList = resGetData$lm,paramList = res_learn$variable$param,mcStrategy = mcStrategy,nbClass = 2,confidenceLevel = 0.95)
